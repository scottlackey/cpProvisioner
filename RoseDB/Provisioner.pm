# Here we map DB table names to Rose:DB objects.

package Appenv;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('appenv');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('appenv');
    __PACKAGE__->make_manager_methods('appenvs');
package AppenvVersion;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('appenv_version');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('appenv_version');
    __PACKAGE__->make_manager_methods('appenvversions');Q
package Appinstance;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('appinstance');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('appinstance');
    __PACKAGE__->make_manager_methods('appinstances');
package Appserver;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('appserver');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('appserver');
    __PACKAGE__->make_manager_methods('appservers');
package Chrootimage;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('chrootimage');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('chrootimage');
    __PACKAGE__->make_manager_methods('chrootimages');
package Osimage;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('osimage');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('osimage');
    __PACKAGE__->make_manager_methods('osimages');
package Publicinterface;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('public_interface');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('public_interface');
    __PACKAGE__->make_manager_methods('publicinterfaces');
package Resource;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('resource');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('resource');
    __PACKAGE__->make_manager_methods('resources');
package Resourcetype;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('resource_type');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('resource_type');
    __PACKAGE__->make_manager_methods('resourcetypes');
package Resourceversion;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('resource_version');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('resource_version');
    __PACKAGE__->make_manager_methods('resourceversions');
package Resourceaccess;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('resourceaccess');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('resourceaccess');
    __PACKAGE__->make_manager_methods('resourceaccesses');
package Resourceserver;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('resourceserver');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('resourceserver');
    __PACKAGE__->make_manager_methods('resourceservers');
package Threadpack;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('threadpack');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('threadpack');
    __PACKAGE__->make_manager_methods('threadpacks');
package User;
    use base 'My::DB::Object';
    __PACKAGE__->meta->table('user');
    __PACKAGE__->meta->auto_initialize;
    __PACKAGE__->meta->make_manager_class('user');
    __PACKAGE__->make_manager_methods('users');
1;
